#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSMTenon.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="repgen")]
	public partial class RepGenDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStrategyModel(StrategyModel instance);
    partial void UpdateStrategyModel(StrategyModel instance);
    partial void DeleteStrategyModel(StrategyModel instance);
    partial void InsertStrategy(Strategy instance);
    partial void UpdateStrategy(Strategy instance);
    partial void DeleteStrategy(Strategy instance);
    #endregion
		
		public RepGenDataContext() : 
				base(global::RSMTenon.Data.Properties.Settings.Default.repgenConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StrategyModel> StrategyModels
		{
			get
			{
				return this.GetTable<StrategyModel>();
			}
		}
		
		public System.Data.Linq.Table<Strategy> Strategies
		{
			get
			{
				return this.GetTable<Strategy>();
			}
		}
	}
	
	[Table(Name="dbo.tblStrategyModel")]
	public partial class StrategyModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _InvestmentTypeName;
		
		private string _InvestmentName;
		
		private string _StrategyID;
		
		private decimal _PurchaseCharge;
		
		private decimal _Weighting;
		
		private decimal _ExpectedYield;
		
		private EntityRef<Strategy> _Strategy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnInvestmentTypeNameChanging(string value);
    partial void OnInvestmentTypeNameChanged();
    partial void OnInvestmentNameChanging(string value);
    partial void OnInvestmentNameChanged();
    partial void OnStrategyIDChanging(string value);
    partial void OnStrategyIDChanged();
    partial void OnPurchaseChargeChanging(decimal value);
    partial void OnPurchaseChargeChanged();
    partial void OnWeightingChanging(decimal value);
    partial void OnWeightingChanged();
    partial void OnExpectedYieldChanging(decimal value);
    partial void OnExpectedYieldChanged();
    #endregion
		
		public StrategyModel()
		{
			this._Strategy = default(EntityRef<Strategy>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvestmentTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InvestmentTypeName
		{
			get
			{
				return this._InvestmentTypeName;
			}
			set
			{
				if ((this._InvestmentTypeName != value))
				{
					this.OnInvestmentTypeNameChanging(value);
					this.SendPropertyChanging();
					this._InvestmentTypeName = value;
					this.SendPropertyChanged("InvestmentTypeName");
					this.OnInvestmentTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_InvestmentName", DbType="NVarChar(100)")]
		public string InvestmentName
		{
			get
			{
				return this._InvestmentName;
			}
			set
			{
				if ((this._InvestmentName != value))
				{
					this.OnInvestmentNameChanging(value);
					this.SendPropertyChanging();
					this._InvestmentName = value;
					this.SendPropertyChanged("InvestmentName");
					this.OnInvestmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_StrategyID", DbType="NChar(2) NOT NULL", CanBeNull=false)]
		public string StrategyID
		{
			get
			{
				return this._StrategyID;
			}
			set
			{
				if ((this._StrategyID != value))
				{
					if (this._Strategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIDChanging(value);
					this.SendPropertyChanging();
					this._StrategyID = value;
					this.SendPropertyChanged("StrategyID");
					this.OnStrategyIDChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseCharge", DbType="SmallMoney NOT NULL")]
		public decimal PurchaseCharge
		{
			get
			{
				return this._PurchaseCharge;
			}
			set
			{
				if ((this._PurchaseCharge != value))
				{
					this.OnPurchaseChargeChanging(value);
					this.SendPropertyChanging();
					this._PurchaseCharge = value;
					this.SendPropertyChanged("PurchaseCharge");
					this.OnPurchaseChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Weighting", DbType="Decimal(5,4) NOT NULL")]
		public decimal Weighting
		{
			get
			{
				return this._Weighting;
			}
			set
			{
				if ((this._Weighting != value))
				{
					this.OnWeightingChanging(value);
					this.SendPropertyChanging();
					this._Weighting = value;
					this.SendPropertyChanged("Weighting");
					this.OnWeightingChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedYield", DbType="Decimal(5,4) NOT NULL")]
		public decimal ExpectedYield
		{
			get
			{
				return this._ExpectedYield;
			}
			set
			{
				if ((this._ExpectedYield != value))
				{
					this.OnExpectedYieldChanging(value);
					this.SendPropertyChanging();
					this._ExpectedYield = value;
					this.SendPropertyChanged("ExpectedYield");
					this.OnExpectedYieldChanged();
				}
			}
		}
		
		[Association(Name="Strategy_StrategyModel", Storage="_Strategy", ThisKey="StrategyID", OtherKey="ID", IsForeignKey=true)]
		public Strategy Strategy
		{
			get
			{
				return this._Strategy.Entity;
			}
			set
			{
				Strategy previousValue = this._Strategy.Entity;
				if (((previousValue != value) 
							|| (this._Strategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Strategy.Entity = null;
						previousValue.StrategyModels.Remove(this);
					}
					this._Strategy.Entity = value;
					if ((value != null))
					{
						value.StrategyModels.Add(this);
						this._StrategyID = value.ID;
					}
					else
					{
						this._StrategyID = default(string);
					}
					this.SendPropertyChanged("Strategy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblStrategy")]
	public partial class Strategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private decimal _Cost;
		
		private EntitySet<StrategyModel> _StrategyModels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    #endregion
		
		public Strategy()
		{
			this._StrategyModels = new EntitySet<StrategyModel>(new Action<StrategyModel>(this.attach_StrategyModels), new Action<StrategyModel>(this.detach_StrategyModels));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Cost", DbType="SmallMoney NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[Association(Name="Strategy_StrategyModel", Storage="_StrategyModels", ThisKey="ID", OtherKey="StrategyID")]
		public EntitySet<StrategyModel> StrategyModels
		{
			get
			{
				return this._StrategyModels;
			}
			set
			{
				this._StrategyModels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StrategyModels(StrategyModel entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = this;
		}
		
		private void detach_StrategyModels(StrategyModel entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = null;
		}
	}
}
#pragma warning restore 1591
