#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSMTenon.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RepGen")]
	public partial class RepGenDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssetClass(AssetClass instance);
    partial void UpdateAssetClass(AssetClass instance);
    partial void DeleteAssetClass(AssetClass instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertModelBreakdown(ModelBreakdown instance);
    partial void UpdateModelBreakdown(ModelBreakdown instance);
    partial void DeleteModelBreakdown(ModelBreakdown instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertClientWeightingDifference(ClientWeightingDifference instance);
    partial void UpdateClientWeightingDifference(ClientWeightingDifference instance);
    partial void DeleteClientWeightingDifference(ClientWeightingDifference instance);
    partial void InsertBenchmark(Benchmark instance);
    partial void UpdateBenchmark(Benchmark instance);
    partial void DeleteBenchmark(Benchmark instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertStrategy(Strategy instance);
    partial void UpdateStrategy(Strategy instance);
    partial void DeleteStrategy(Strategy instance);
    partial void InsertHistoricData(HistoricData instance);
    partial void UpdateHistoricData(HistoricData instance);
    partial void DeleteHistoricData(HistoricData instance);
    partial void InsertBenchmarkData(BenchmarkData instance);
    partial void UpdateBenchmarkData(BenchmarkData instance);
    partial void DeleteBenchmarkData(BenchmarkData instance);
    partial void InsertAssetGroup(AssetGroup instance);
    partial void UpdateAssetGroup(AssetGroup instance);
    partial void DeleteAssetGroup(AssetGroup instance);
    partial void InsertAssetGroupClass(AssetGroupClass instance);
    partial void UpdateAssetGroupClass(AssetGroupClass instance);
    partial void DeleteAssetGroupClass(AssetGroupClass instance);
    partial void InsertClientAsset(ClientAsset instance);
    partial void UpdateClientAsset(ClientAsset instance);
    partial void DeleteClientAsset(ClientAsset instance);
    partial void InsertClientAssetClass(ClientAssetClass instance);
    partial void UpdateClientAssetClass(ClientAssetClass instance);
    partial void DeleteClientAssetClass(ClientAssetClass instance);
    #endregion
		
		public RepGenDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RSMTenon.Data.Properties.Settings.RepGenConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssetClass> AssetClasses
		{
			get
			{
				return this.GetTable<AssetClass>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<ModelBreakdown> ModelBreakdowns
		{
			get
			{
				return this.GetTable<ModelBreakdown>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<ReturnData> ReturnDatas
		{
			get
			{
				return this.GetTable<ReturnData>();
			}
		}
		
		public System.Data.Linq.Table<ClientWeightingDifference> ClientWeightingDifferences
		{
			get
			{
				return this.GetTable<ClientWeightingDifference>();
			}
		}
		
		public System.Data.Linq.Table<Benchmark> Benchmarks
		{
			get
			{
				return this.GetTable<Benchmark>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<Strategy> Strategies
		{
			get
			{
				return this.GetTable<Strategy>();
			}
		}
		
		public System.Data.Linq.Table<HistoricData> HistoricDatas
		{
			get
			{
				return this.GetTable<HistoricData>();
			}
		}
		
		public System.Data.Linq.Table<BenchmarkData> BenchmarkDatas
		{
			get
			{
				return this.GetTable<BenchmarkData>();
			}
		}
		
		public System.Data.Linq.Table<AssetGroup> AssetGroups
		{
			get
			{
				return this.GetTable<AssetGroup>();
			}
		}
		
		public System.Data.Linq.Table<AssetGroupClass> AssetGroupClasses
		{
			get
			{
				return this.GetTable<AssetGroupClass>();
			}
		}
		
		public System.Data.Linq.Table<ClientAsset> ClientAssets
		{
			get
			{
				return this.GetTable<ClientAsset>();
			}
		}
		
		public System.Data.Linq.Table<ClientAssetClass> ClientAssetClasses
		{
			get
			{
				return this.GetTable<ClientAssetClass>();
			}
		}
		
		public System.Data.Linq.Table<AssetWeighting> AssetWeightings
		{
			get
			{
				return this.GetTable<AssetWeighting>();
			}
		}
		
		[Function(Name="dbo.spRollingReturn")]
		public ISingleResult<ReturnData> RollingReturn([Parameter(DbType="Int")] System.Nullable<int> years, [Parameter(DbType="NChar(4)")] string assetClassID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), years, assetClassID);
			return ((ISingleResult<ReturnData>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spAssetClassReturn")]
		public ISingleResult<ReturnData> AssetClassReturn([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(DbType="NChar(4)")] string assetClassID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, assetClassID);
			return ((ISingleResult<ReturnData>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spHistoricPrice")]
		public ISingleResult<ReturnData> HistoricPrice([Parameter(DbType="NChar(4)")] string assetClassID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), assetClassID);
			return ((ISingleResult<ReturnData>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spClientWeightingComparison")]
		public ISingleResult<ClientWeightingDifference> ClientWeightingComparison([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> clientGUID, [Parameter(DbType="NChar(2)")] string strategyID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientGUID, strategyID);
			return ((ISingleResult<ClientWeightingDifference>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spBenchmarkPrice")]
		public ISingleResult<ReturnData> BenchmarkPrice([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(DbType="NChar(4)")] string benchmarkID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, benchmarkID);
			return ((ISingleResult<ReturnData>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spClientAssetReturn")]
		public ISingleResult<ReturnData> ClientAssetReturn([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(Name="ClientGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> clientGUID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, clientGUID);
			return ((ISingleResult<ReturnData>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spClientAssetWeighting")]
		public ISingleResult<AssetWeighting> ClientAssetWeighting([Parameter(Name="ClientGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> clientGUID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientGUID);
			return ((ISingleResult<AssetWeighting>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spModelReturn")]
		public ISingleResult<ReturnData> ModelReturn([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(DbType="NChar(2)")] string strategyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, strategyId);
			return ((ISingleResult<ReturnData>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.tblAssetClass")]
	public partial class AssetClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private EntitySet<Model> _Models;
		
		private EntityRef<AssetGroup> _AssetGroup;
		
		private EntityRef<AssetGroupClass> _AssetGroupClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AssetClass()
		{
			this._Models = new EntitySet<Model>(new Action<Model>(this.attach_Models), new Action<Model>(this.detach_Models));
			this._AssetGroup = default(EntityRef<AssetGroup>);
			this._AssetGroupClass = default(EntityRef<AssetGroupClass>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="AssetClass_Model", Storage="_Models", ThisKey="ID", OtherKey="AssetClassID")]
		public EntitySet<Model> Models
		{
			get
			{
				return this._Models;
			}
			set
			{
				this._Models.Assign(value);
			}
		}
		
		[Association(Name="AssetClass_AssetGroup", Storage="_AssetGroup", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public AssetGroup AssetGroup
		{
			get
			{
				return this._AssetGroup.Entity;
			}
			set
			{
				AssetGroup previousValue = this._AssetGroup.Entity;
				if (((previousValue != value) 
							|| (this._AssetGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetGroup.Entity = null;
						previousValue.AssetClass = null;
					}
					this._AssetGroup.Entity = value;
					if ((value != null))
					{
						value.AssetClass = this;
					}
					this.SendPropertyChanged("AssetGroup");
				}
			}
		}
		
		[Association(Name="AssetClass_AssetGroupClass", Storage="_AssetGroupClass", ThisKey="ID", OtherKey="AssetClassID", IsUnique=true, IsForeignKey=false)]
		public AssetGroupClass AssetGroupClass
		{
			get
			{
				return this._AssetGroupClass.Entity;
			}
			set
			{
				AssetGroupClass previousValue = this._AssetGroupClass.Entity;
				if (((previousValue != value) 
							|| (this._AssetGroupClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetGroupClass.Entity = null;
						previousValue.AssetClass = null;
					}
					this._AssetGroupClass.Entity = value;
					if ((value != null))
					{
						value.AssetClass = this;
					}
					this.SendPropertyChanged("AssetGroupClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.AssetClass = this;
		}
		
		private void detach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.AssetClass = null;
		}
	}
	
	[Table(Name="dbo.tblClient")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private System.DateTime _MeetingDate;
		
		private decimal _InitialFee;
		
		private short _TimeHorizon;
		
		private bool _ExistingAssets;
		
		private string _StrategyID;
		
		private decimal _InvestmentAmount;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
		private bool _HighNetWorth;
		
		private string _UserID;
		
		private EntitySet<ClientAsset> _ClientAssets;
		
		private EntityRef<ClientAssetClass> _ClientAssetClass;
		
		private EntityRef<Strategy> _Strategy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMeetingDateChanging(System.DateTime value);
    partial void OnMeetingDateChanged();
    partial void OnInitialFeeChanging(decimal value);
    partial void OnInitialFeeChanged();
    partial void OnTimeHorizonChanging(short value);
    partial void OnTimeHorizonChanged();
    partial void OnExistingAssetsChanging(bool value);
    partial void OnExistingAssetsChanged();
    partial void OnStrategyIDChanging(string value);
    partial void OnStrategyIDChanged();
    partial void OnInvestmentAmountChanging(decimal value);
    partial void OnInvestmentAmountChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    partial void OnHighNetWorthChanging(bool value);
    partial void OnHighNetWorthChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    #endregion
		
		public Client()
		{
			this._ClientAssets = new EntitySet<ClientAsset>(new Action<ClientAsset>(this.attach_ClientAssets), new Action<ClientAsset>(this.detach_ClientAssets));
			this._ClientAssetClass = default(EntityRef<ClientAssetClass>);
			this._Strategy = default(EntityRef<Strategy>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MeetingDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime MeetingDate
		{
			get
			{
				return this._MeetingDate;
			}
			set
			{
				if ((this._MeetingDate != value))
				{
					this.OnMeetingDateChanging(value);
					this.SendPropertyChanging();
					this._MeetingDate = value;
					this.SendPropertyChanged("MeetingDate");
					this.OnMeetingDateChanged();
				}
			}
		}
		
		[Column(Storage="_InitialFee", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal InitialFee
		{
			get
			{
				return this._InitialFee;
			}
			set
			{
				if ((this._InitialFee != value))
				{
					this.OnInitialFeeChanging(value);
					this.SendPropertyChanging();
					this._InitialFee = value;
					this.SendPropertyChanged("InitialFee");
					this.OnInitialFeeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeHorizon", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short TimeHorizon
		{
			get
			{
				return this._TimeHorizon;
			}
			set
			{
				if ((this._TimeHorizon != value))
				{
					this.OnTimeHorizonChanging(value);
					this.SendPropertyChanging();
					this._TimeHorizon = value;
					this.SendPropertyChanged("TimeHorizon");
					this.OnTimeHorizonChanged();
				}
			}
		}
		
		[Column(Storage="_ExistingAssets", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ExistingAssets
		{
			get
			{
				return this._ExistingAssets;
			}
			set
			{
				if ((this._ExistingAssets != value))
				{
					this.OnExistingAssetsChanging(value);
					this.SendPropertyChanging();
					this._ExistingAssets = value;
					this.SendPropertyChanged("ExistingAssets");
					this.OnExistingAssetsChanged();
				}
			}
		}
		
		[Column(Storage="_StrategyID", DbType="NChar(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StrategyID
		{
			get
			{
				return this._StrategyID;
			}
			set
			{
				if ((this._StrategyID != value))
				{
					if (this._Strategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIDChanging(value);
					this.SendPropertyChanging();
					this._StrategyID = value;
					this.SendPropertyChanged("StrategyID");
					this.OnStrategyIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvestmentAmount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal InvestmentAmount
		{
			get
			{
				return this._InvestmentAmount;
			}
			set
			{
				if ((this._InvestmentAmount != value))
				{
					this.OnInvestmentAmountChanging(value);
					this.SendPropertyChanging();
					this._InvestmentAmount = value;
					this.SendPropertyChanged("InvestmentAmount");
					this.OnInvestmentAmountChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_HighNetWorth", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool HighNetWorth
		{
			get
			{
				return this._HighNetWorth;
			}
			set
			{
				if ((this._HighNetWorth != value))
				{
					this.OnHighNetWorthChanging(value);
					this.SendPropertyChanging();
					this._HighNetWorth = value;
					this.SendPropertyChanged("HighNetWorth");
					this.OnHighNetWorthChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="Client_ClientAsset", Storage="_ClientAssets", ThisKey="GUID", OtherKey="ClientGUID")]
		public EntitySet<ClientAsset> ClientAssets
		{
			get
			{
				return this._ClientAssets;
			}
			set
			{
				this._ClientAssets.Assign(value);
			}
		}
		
		[Association(Name="Client_ClientAssetClass", Storage="_ClientAssetClass", ThisKey="GUID", OtherKey="ClientGUID", IsUnique=true, IsForeignKey=false)]
		public ClientAssetClass ClientAssetClass
		{
			get
			{
				return this._ClientAssetClass.Entity;
			}
			set
			{
				ClientAssetClass previousValue = this._ClientAssetClass.Entity;
				if (((previousValue != value) 
							|| (this._ClientAssetClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientAssetClass.Entity = null;
						previousValue.Client = null;
					}
					this._ClientAssetClass.Entity = value;
					if ((value != null))
					{
						value.Client = this;
					}
					this.SendPropertyChanged("ClientAssetClass");
				}
			}
		}
		
		[Association(Name="Strategy_Client", Storage="_Strategy", ThisKey="StrategyID", OtherKey="ID", IsForeignKey=true)]
		public Strategy Strategy
		{
			get
			{
				return this._Strategy.Entity;
			}
			set
			{
				Strategy previousValue = this._Strategy.Entity;
				if (((previousValue != value) 
							|| (this._Strategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Strategy.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Strategy.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._StrategyID = value.ID;
					}
					else
					{
						this._StrategyID = default(string);
					}
					this.SendPropertyChanged("Strategy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientAssets(ClientAsset entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientAssets(ClientAsset entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[Table(Name="dbo.tblModelBreakdown")]
	public partial class ModelBreakdown : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _StrategyID;
		
		private string _AssetClassID;
		
		private decimal _Weighting;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
		private EntityRef<Strategy> _Strategy;
		
		private EntityRef<AssetGroupClass> _AssetGroupClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnStrategyIDChanging(string value);
    partial void OnStrategyIDChanged();
    partial void OnAssetClassIDChanging(string value);
    partial void OnAssetClassIDChanged();
    partial void OnWeightingChanging(decimal value);
    partial void OnWeightingChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public ModelBreakdown()
		{
			this._Strategy = default(EntityRef<Strategy>);
			this._AssetGroupClass = default(EntityRef<AssetGroupClass>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_StrategyID", DbType="NChar(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StrategyID
		{
			get
			{
				return this._StrategyID;
			}
			set
			{
				if ((this._StrategyID != value))
				{
					if (this._Strategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIDChanging(value);
					this.SendPropertyChanging();
					this._StrategyID = value;
					this.SendPropertyChanged("StrategyID");
					this.OnStrategyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetClassID", DbType="NChar(4) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AssetClassID
		{
			get
			{
				return this._AssetClassID;
			}
			set
			{
				if ((this._AssetClassID != value))
				{
					if (this._AssetGroupClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetClassIDChanging(value);
					this.SendPropertyChanging();
					this._AssetClassID = value;
					this.SendPropertyChanged("AssetClassID");
					this.OnAssetClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_Weighting", DbType="Decimal(5,4) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Weighting
		{
			get
			{
				return this._Weighting;
			}
			set
			{
				if ((this._Weighting != value))
				{
					this.OnWeightingChanging(value);
					this.SendPropertyChanging();
					this._Weighting = value;
					this.SendPropertyChanged("Weighting");
					this.OnWeightingChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		[Association(Name="Strategy_ModelBreakdown", Storage="_Strategy", ThisKey="StrategyID", OtherKey="ID", IsForeignKey=true)]
		public Strategy Strategy
		{
			get
			{
				return this._Strategy.Entity;
			}
			set
			{
				Strategy previousValue = this._Strategy.Entity;
				if (((previousValue != value) 
							|| (this._Strategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Strategy.Entity = null;
						previousValue.ModelBreakdowns.Remove(this);
					}
					this._Strategy.Entity = value;
					if ((value != null))
					{
						value.ModelBreakdowns.Add(this);
						this._StrategyID = value.ID;
					}
					else
					{
						this._StrategyID = default(string);
					}
					this.SendPropertyChanged("Strategy");
				}
			}
		}
		
		[Association(Name="AssetGroupClass_ModelBreakdown", Storage="_AssetGroupClass", ThisKey="AssetClassID", OtherKey="AssetClassID", IsForeignKey=true)]
		public AssetGroupClass AssetGroupClass
		{
			get
			{
				return this._AssetGroupClass.Entity;
			}
			set
			{
				AssetGroupClass previousValue = this._AssetGroupClass.Entity;
				if (((previousValue != value) 
							|| (this._AssetGroupClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetGroupClass.Entity = null;
						previousValue.ModelBreakdowns.Remove(this);
					}
					this._AssetGroupClass.Entity = value;
					if ((value != null))
					{
						value.ModelBreakdowns.Add(this);
						this._AssetClassID = value.AssetClassID;
					}
					else
					{
						this._AssetClassID = default(string);
					}
					this.SendPropertyChanged("AssetGroupClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblModel")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _StrategyID;
		
		private string _AssetClassID;
		
		private string _InvestmentName;
		
		private decimal _Weighting;
		
		private decimal _ExpectedYield;
		
		private decimal _PurchaseCharge;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
		private EntityRef<AssetClass> _AssetClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnStrategyIDChanging(string value);
    partial void OnStrategyIDChanged();
    partial void OnAssetClassIDChanging(string value);
    partial void OnAssetClassIDChanged();
    partial void OnInvestmentNameChanging(string value);
    partial void OnInvestmentNameChanged();
    partial void OnWeightingChanging(decimal value);
    partial void OnWeightingChanged();
    partial void OnExpectedYieldChanging(decimal value);
    partial void OnExpectedYieldChanged();
    partial void OnPurchaseChargeChanging(decimal value);
    partial void OnPurchaseChargeChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public Model()
		{
			this._AssetClass = default(EntityRef<AssetClass>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_StrategyID", DbType="NChar(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StrategyID
		{
			get
			{
				return this._StrategyID;
			}
			set
			{
				if ((this._StrategyID != value))
				{
					this.OnStrategyIDChanging(value);
					this.SendPropertyChanging();
					this._StrategyID = value;
					this.SendPropertyChanged("StrategyID");
					this.OnStrategyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetClassID", DbType="NChar(4) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AssetClassID
		{
			get
			{
				return this._AssetClassID;
			}
			set
			{
				if ((this._AssetClassID != value))
				{
					if (this._AssetClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetClassIDChanging(value);
					this.SendPropertyChanging();
					this._AssetClassID = value;
					this.SendPropertyChanged("AssetClassID");
					this.OnAssetClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvestmentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string InvestmentName
		{
			get
			{
				return this._InvestmentName;
			}
			set
			{
				if ((this._InvestmentName != value))
				{
					this.OnInvestmentNameChanging(value);
					this.SendPropertyChanging();
					this._InvestmentName = value;
					this.SendPropertyChanged("InvestmentName");
					this.OnInvestmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Weighting", DbType="Decimal(5,4) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Weighting
		{
			get
			{
				return this._Weighting;
			}
			set
			{
				if ((this._Weighting != value))
				{
					this.OnWeightingChanging(value);
					this.SendPropertyChanging();
					this._Weighting = value;
					this.SendPropertyChanged("Weighting");
					this.OnWeightingChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedYield", DbType="Decimal(5,4) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal ExpectedYield
		{
			get
			{
				return this._ExpectedYield;
			}
			set
			{
				if ((this._ExpectedYield != value))
				{
					this.OnExpectedYieldChanging(value);
					this.SendPropertyChanging();
					this._ExpectedYield = value;
					this.SendPropertyChanged("ExpectedYield");
					this.OnExpectedYieldChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseCharge", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal PurchaseCharge
		{
			get
			{
				return this._PurchaseCharge;
			}
			set
			{
				if ((this._PurchaseCharge != value))
				{
					this.OnPurchaseChargeChanging(value);
					this.SendPropertyChanging();
					this._PurchaseCharge = value;
					this.SendPropertyChanged("PurchaseCharge");
					this.OnPurchaseChargeChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		[Association(Name="AssetClass_Model", Storage="_AssetClass", ThisKey="AssetClassID", OtherKey="ID", IsForeignKey=true)]
		public AssetClass AssetClass
		{
			get
			{
				return this._AssetClass.Entity;
			}
			set
			{
				AssetClass previousValue = this._AssetClass.Entity;
				if (((previousValue != value) 
							|| (this._AssetClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetClass.Entity = null;
						previousValue.Models.Remove(this);
					}
					this._AssetClass.Entity = value;
					if ((value != null))
					{
						value.Models.Add(this);
						this._AssetClassID = value.ID;
					}
					else
					{
						this._AssetClassID = default(string);
					}
					this.SendPropertyChanged("AssetClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.vwReturnData")]
	public partial class ReturnData
	{
		
		private int _Date;
		
		private double _Value;
		
		public ReturnData()
		{
		}
		
		[Column(Storage="_Date", DbType="Int")]
		public int Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}
	
	[Table(Name="")]
	public partial class ClientWeightingDifference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AssetClassID;
		
		private string _AssetClassName;
		
		private double _WeightingDifference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetClassIDChanging(string value);
    partial void OnAssetClassIDChanged();
    partial void OnAssetClassNameChanging(string value);
    partial void OnAssetClassNameChanged();
    partial void OnWeightingDifferenceChanging(double value);
    partial void OnWeightingDifferenceChanged();
    #endregion
		
		public ClientWeightingDifference()
		{
			OnCreated();
		}
		
		[Column(Storage="_AssetClassID", DbType="NChar(4) NOT NULL", CanBeNull=false)]
		public string AssetClassID
		{
			get
			{
				return this._AssetClassID;
			}
			set
			{
				if ((this._AssetClassID != value))
				{
					this.OnAssetClassIDChanging(value);
					this.SendPropertyChanging();
					this._AssetClassID = value;
					this.SendPropertyChanged("AssetClassID");
					this.OnAssetClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetClassName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetClassName
		{
			get
			{
				return this._AssetClassName;
			}
			set
			{
				if ((this._AssetClassName != value))
				{
					this.OnAssetClassNameChanging(value);
					this.SendPropertyChanging();
					this._AssetClassName = value;
					this.SendPropertyChanged("AssetClassName");
					this.OnAssetClassNameChanged();
				}
			}
		}
		
		[Column(Storage="_WeightingDifference", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double WeightingDifference
		{
			get
			{
				return this._WeightingDifference;
			}
			set
			{
				if ((this._WeightingDifference != value))
				{
					this.OnWeightingDifferenceChanging(value);
					this.SendPropertyChanging();
					this._WeightingDifference = value;
					this.SendPropertyChanged("WeightingDifference");
					this.OnWeightingDifferenceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblBenchmark")]
	public partial class Benchmark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private EntitySet<Strategy> _Strategies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Benchmark()
		{
			this._Strategies = new EntitySet<Strategy>(new Action<Strategy>(this.attach_Strategies), new Action<Strategy>(this.detach_Strategies));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Benchmark_Strategy", Storage="_Strategies", ThisKey="ID", OtherKey="BenchmarkID")]
		public EntitySet<Strategy> Strategies
		{
			get
			{
				return this._Strategies;
			}
			set
			{
				this._Strategies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Strategies(Strategy entity)
		{
			this.SendPropertyChanging();
			entity.Benchmark = this;
		}
		
		private void detach_Strategies(Strategy entity)
		{
			this.SendPropertyChanging();
			entity.Benchmark = null;
		}
	}
	
	[Table(Name="dbo.tblContent")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _ContentID;
		
		private string _Category;
		
		private string _StrategyID;
		
		private string _Text;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
		private EntityRef<Strategy> _Strategy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnContentIDChanging(string value);
    partial void OnContentIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnStrategyIDChanging(string value);
    partial void OnStrategyIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public Content()
		{
			this._Strategy = default(EntityRef<Strategy>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_StrategyID", DbType="NChar(2)", UpdateCheck=UpdateCheck.Never)]
		public string StrategyID
		{
			get
			{
				return this._StrategyID;
			}
			set
			{
				if ((this._StrategyID != value))
				{
					if (this._Strategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIDChanging(value);
					this.SendPropertyChanging();
					this._StrategyID = value;
					this.SendPropertyChanged("StrategyID");
					this.OnStrategyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		[Association(Name="Strategy_Content", Storage="_Strategy", ThisKey="StrategyID", OtherKey="ID", IsForeignKey=true)]
		public Strategy Strategy
		{
			get
			{
				return this._Strategy.Entity;
			}
			set
			{
				Strategy previousValue = this._Strategy.Entity;
				if (((previousValue != value) 
							|| (this._Strategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Strategy.Entity = null;
						previousValue.Contents.Remove(this);
					}
					this._Strategy.Entity = value;
					if ((value != null))
					{
						value.Contents.Add(this);
						this._StrategyID = value.ID;
					}
					else
					{
						this._StrategyID = default(string);
					}
					this.SendPropertyChanged("Strategy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblStrategy")]
	public partial class Strategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private short _TimeHorizon;
		
		private short _ReturnOverBase;
		
		private decimal _Cost;
		
		private string _BenchmarkID;
		
		private decimal _RollingReturn;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<ModelBreakdown> _ModelBreakdowns;
		
		private EntitySet<Content> _Contents;
		
		private EntityRef<Benchmark> _Benchmark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeHorizonChanging(short value);
    partial void OnTimeHorizonChanged();
    partial void OnReturnOverBaseChanging(short value);
    partial void OnReturnOverBaseChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnBenchmarkIDChanging(string value);
    partial void OnBenchmarkIDChanged();
    partial void OnRollingReturnChanging(decimal value);
    partial void OnRollingReturnChanged();
    #endregion
		
		public Strategy()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._ModelBreakdowns = new EntitySet<ModelBreakdown>(new Action<ModelBreakdown>(this.attach_ModelBreakdowns), new Action<ModelBreakdown>(this.detach_ModelBreakdowns));
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			this._Benchmark = default(EntityRef<Benchmark>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeHorizon", DbType="SmallInt NOT NULL")]
		public short TimeHorizon
		{
			get
			{
				return this._TimeHorizon;
			}
			set
			{
				if ((this._TimeHorizon != value))
				{
					this.OnTimeHorizonChanging(value);
					this.SendPropertyChanging();
					this._TimeHorizon = value;
					this.SendPropertyChanged("TimeHorizon");
					this.OnTimeHorizonChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnOverBase", DbType="SmallInt NOT NULL")]
		public short ReturnOverBase
		{
			get
			{
				return this._ReturnOverBase;
			}
			set
			{
				if ((this._ReturnOverBase != value))
				{
					this.OnReturnOverBaseChanging(value);
					this.SendPropertyChanging();
					this._ReturnOverBase = value;
					this.SendPropertyChanged("ReturnOverBase");
					this.OnReturnOverBaseChanged();
				}
			}
		}
		
		[Column(Storage="_Cost", DbType="Money NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[Column(Storage="_BenchmarkID", DbType="NChar(4) NOT NULL", CanBeNull=false)]
		public string BenchmarkID
		{
			get
			{
				return this._BenchmarkID;
			}
			set
			{
				if ((this._BenchmarkID != value))
				{
					if (this._Benchmark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBenchmarkIDChanging(value);
					this.SendPropertyChanging();
					this._BenchmarkID = value;
					this.SendPropertyChanged("BenchmarkID");
					this.OnBenchmarkIDChanged();
				}
			}
		}
		
		[Column(Storage="_RollingReturn", DbType="Decimal(5,1) NOT NULL")]
		public decimal RollingReturn
		{
			get
			{
				return this._RollingReturn;
			}
			set
			{
				if ((this._RollingReturn != value))
				{
					this.OnRollingReturnChanging(value);
					this.SendPropertyChanging();
					this._RollingReturn = value;
					this.SendPropertyChanged("RollingReturn");
					this.OnRollingReturnChanged();
				}
			}
		}
		
		[Association(Name="Strategy_Client", Storage="_Clients", ThisKey="ID", OtherKey="StrategyID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[Association(Name="Strategy_ModelBreakdown", Storage="_ModelBreakdowns", ThisKey="ID", OtherKey="StrategyID")]
		public EntitySet<ModelBreakdown> ModelBreakdowns
		{
			get
			{
				return this._ModelBreakdowns;
			}
			set
			{
				this._ModelBreakdowns.Assign(value);
			}
		}
		
		[Association(Name="Strategy_Content", Storage="_Contents", ThisKey="ID", OtherKey="StrategyID")]
		public EntitySet<Content> Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		[Association(Name="Benchmark_Strategy", Storage="_Benchmark", ThisKey="BenchmarkID", OtherKey="ID", IsForeignKey=true)]
		public Benchmark Benchmark
		{
			get
			{
				return this._Benchmark.Entity;
			}
			set
			{
				Benchmark previousValue = this._Benchmark.Entity;
				if (((previousValue != value) 
							|| (this._Benchmark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benchmark.Entity = null;
						previousValue.Strategies.Remove(this);
					}
					this._Benchmark.Entity = value;
					if ((value != null))
					{
						value.Strategies.Add(this);
						this._BenchmarkID = value.ID;
					}
					else
					{
						this._BenchmarkID = default(string);
					}
					this.SendPropertyChanged("Benchmark");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = null;
		}
		
		private void attach_ModelBreakdowns(ModelBreakdown entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = this;
		}
		
		private void detach_ModelBreakdowns(ModelBreakdown entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = null;
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = null;
		}
	}
	
	[Table(Name="dbo.tblHistoricData")]
	public partial class HistoricData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private double _CASH;
		
		private double _UKGB;
		
		private double _UKCB;
		
		private double _COPR;
		
		private double _UKHY;
		
		private double _WOBO;
		
		private double _HEDG;
		
		private double _GLEQ;
		
		private double _LOSH;
		
		private double _UKEQ;
		
		private double _PREQ;
		
		private double _COMM;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCASHChanging(double value);
    partial void OnCASHChanged();
    partial void OnUKGBChanging(double value);
    partial void OnUKGBChanged();
    partial void OnUKCBChanging(double value);
    partial void OnUKCBChanged();
    partial void OnCOPRChanging(double value);
    partial void OnCOPRChanged();
    partial void OnUKHYChanging(double value);
    partial void OnUKHYChanged();
    partial void OnWOBOChanging(double value);
    partial void OnWOBOChanged();
    partial void OnHEDGChanging(double value);
    partial void OnHEDGChanged();
    partial void OnGLEQChanging(double value);
    partial void OnGLEQChanged();
    partial void OnLOSHChanging(double value);
    partial void OnLOSHChanged();
    partial void OnUKEQChanging(double value);
    partial void OnUKEQChanged();
    partial void OnPREQChanging(double value);
    partial void OnPREQChanged();
    partial void OnCOMMChanging(double value);
    partial void OnCOMMChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public HistoricData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_CASH", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double CASH
		{
			get
			{
				return this._CASH;
			}
			set
			{
				if ((this._CASH != value))
				{
					this.OnCASHChanging(value);
					this.SendPropertyChanging();
					this._CASH = value;
					this.SendPropertyChanged("CASH");
					this.OnCASHChanged();
				}
			}
		}
		
		[Column(Storage="_UKGB", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double UKGB
		{
			get
			{
				return this._UKGB;
			}
			set
			{
				if ((this._UKGB != value))
				{
					this.OnUKGBChanging(value);
					this.SendPropertyChanging();
					this._UKGB = value;
					this.SendPropertyChanged("UKGB");
					this.OnUKGBChanged();
				}
			}
		}
		
		[Column(Storage="_UKCB", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double UKCB
		{
			get
			{
				return this._UKCB;
			}
			set
			{
				if ((this._UKCB != value))
				{
					this.OnUKCBChanging(value);
					this.SendPropertyChanging();
					this._UKCB = value;
					this.SendPropertyChanged("UKCB");
					this.OnUKCBChanged();
				}
			}
		}
		
		[Column(Storage="_COPR", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double COPR
		{
			get
			{
				return this._COPR;
			}
			set
			{
				if ((this._COPR != value))
				{
					this.OnCOPRChanging(value);
					this.SendPropertyChanging();
					this._COPR = value;
					this.SendPropertyChanged("COPR");
					this.OnCOPRChanged();
				}
			}
		}
		
		[Column(Storage="_UKHY", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double UKHY
		{
			get
			{
				return this._UKHY;
			}
			set
			{
				if ((this._UKHY != value))
				{
					this.OnUKHYChanging(value);
					this.SendPropertyChanging();
					this._UKHY = value;
					this.SendPropertyChanged("UKHY");
					this.OnUKHYChanged();
				}
			}
		}
		
		[Column(Storage="_WOBO", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double WOBO
		{
			get
			{
				return this._WOBO;
			}
			set
			{
				if ((this._WOBO != value))
				{
					this.OnWOBOChanging(value);
					this.SendPropertyChanging();
					this._WOBO = value;
					this.SendPropertyChanged("WOBO");
					this.OnWOBOChanged();
				}
			}
		}
		
		[Column(Storage="_HEDG", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double HEDG
		{
			get
			{
				return this._HEDG;
			}
			set
			{
				if ((this._HEDG != value))
				{
					this.OnHEDGChanging(value);
					this.SendPropertyChanging();
					this._HEDG = value;
					this.SendPropertyChanged("HEDG");
					this.OnHEDGChanged();
				}
			}
		}
		
		[Column(Storage="_GLEQ", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double GLEQ
		{
			get
			{
				return this._GLEQ;
			}
			set
			{
				if ((this._GLEQ != value))
				{
					this.OnGLEQChanging(value);
					this.SendPropertyChanging();
					this._GLEQ = value;
					this.SendPropertyChanged("GLEQ");
					this.OnGLEQChanged();
				}
			}
		}
		
		[Column(Storage="_LOSH", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double LOSH
		{
			get
			{
				return this._LOSH;
			}
			set
			{
				if ((this._LOSH != value))
				{
					this.OnLOSHChanging(value);
					this.SendPropertyChanging();
					this._LOSH = value;
					this.SendPropertyChanged("LOSH");
					this.OnLOSHChanged();
				}
			}
		}
		
		[Column(Storage="_UKEQ", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double UKEQ
		{
			get
			{
				return this._UKEQ;
			}
			set
			{
				if ((this._UKEQ != value))
				{
					this.OnUKEQChanging(value);
					this.SendPropertyChanging();
					this._UKEQ = value;
					this.SendPropertyChanged("UKEQ");
					this.OnUKEQChanged();
				}
			}
		}
		
		[Column(Storage="_PREQ", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double PREQ
		{
			get
			{
				return this._PREQ;
			}
			set
			{
				if ((this._PREQ != value))
				{
					this.OnPREQChanging(value);
					this.SendPropertyChanging();
					this._PREQ = value;
					this.SendPropertyChanged("PREQ");
					this.OnPREQChanged();
				}
			}
		}
		
		[Column(Storage="_COMM", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double COMM
		{
			get
			{
				return this._COMM;
			}
			set
			{
				if ((this._COMM != value))
				{
					this.OnCOMMChanging(value);
					this.SendPropertyChanging();
					this._COMM = value;
					this.SendPropertyChanged("COMM");
					this.OnCOMMChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblBenchmarkData")]
	public partial class BenchmarkData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private double _STBO;
		
		private double _CAMA;
		
		private double _BAMA;
		
		private double _ACMA;
		
		private double _GLGR;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSTBOChanging(double value);
    partial void OnSTBOChanged();
    partial void OnCAMAChanging(double value);
    partial void OnCAMAChanged();
    partial void OnBAMAChanging(double value);
    partial void OnBAMAChanged();
    partial void OnACMAChanging(double value);
    partial void OnACMAChanged();
    partial void OnGLGRChanging(double value);
    partial void OnGLGRChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public BenchmarkData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_STBO", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double STBO
		{
			get
			{
				return this._STBO;
			}
			set
			{
				if ((this._STBO != value))
				{
					this.OnSTBOChanging(value);
					this.SendPropertyChanging();
					this._STBO = value;
					this.SendPropertyChanged("STBO");
					this.OnSTBOChanged();
				}
			}
		}
		
		[Column(Storage="_CAMA", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double CAMA
		{
			get
			{
				return this._CAMA;
			}
			set
			{
				if ((this._CAMA != value))
				{
					this.OnCAMAChanging(value);
					this.SendPropertyChanging();
					this._CAMA = value;
					this.SendPropertyChanged("CAMA");
					this.OnCAMAChanged();
				}
			}
		}
		
		[Column(Storage="_BAMA", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double BAMA
		{
			get
			{
				return this._BAMA;
			}
			set
			{
				if ((this._BAMA != value))
				{
					this.OnBAMAChanging(value);
					this.SendPropertyChanging();
					this._BAMA = value;
					this.SendPropertyChanged("BAMA");
					this.OnBAMAChanged();
				}
			}
		}
		
		[Column(Storage="_ACMA", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double ACMA
		{
			get
			{
				return this._ACMA;
			}
			set
			{
				if ((this._ACMA != value))
				{
					this.OnACMAChanging(value);
					this.SendPropertyChanging();
					this._ACMA = value;
					this.SendPropertyChanged("ACMA");
					this.OnACMAChanged();
				}
			}
		}
		
		[Column(Storage="_GLGR", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double GLGR
		{
			get
			{
				return this._GLGR;
			}
			set
			{
				if ((this._GLGR != value))
				{
					this.OnGLGRChanging(value);
					this.SendPropertyChanging();
					this._GLGR = value;
					this.SendPropertyChanged("GLGR");
					this.OnGLGRChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblAssetGroup")]
	public partial class AssetGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private EntitySet<AssetGroupClass> _AssetGroupClasses;
		
		private EntityRef<AssetClass> _AssetClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    #endregion
		
		public AssetGroup()
		{
			this._AssetGroupClasses = new EntitySet<AssetGroupClass>(new Action<AssetGroupClass>(this.attach_AssetGroupClasses), new Action<AssetGroupClass>(this.detach_AssetGroupClasses));
			this._AssetClass = default(EntityRef<AssetClass>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._AssetClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Association(Name="AssetGroup_AssetGroupClass", Storage="_AssetGroupClasses", ThisKey="ID", OtherKey="AssetGroupID")]
		public EntitySet<AssetGroupClass> AssetGroupClasses
		{
			get
			{
				return this._AssetGroupClasses;
			}
			set
			{
				this._AssetGroupClasses.Assign(value);
			}
		}
		
		[Association(Name="AssetClass_AssetGroup", Storage="_AssetClass", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public AssetClass AssetClass
		{
			get
			{
				return this._AssetClass.Entity;
			}
			set
			{
				AssetClass previousValue = this._AssetClass.Entity;
				if (((previousValue != value) 
							|| (this._AssetClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetClass.Entity = null;
						previousValue.AssetGroup = null;
					}
					this._AssetClass.Entity = value;
					if ((value != null))
					{
						value.AssetGroup = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("AssetClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssetGroupClasses(AssetGroupClass entity)
		{
			this.SendPropertyChanging();
			entity.AssetGroup = this;
		}
		
		private void detach_AssetGroupClasses(AssetGroupClass entity)
		{
			this.SendPropertyChanging();
			entity.AssetGroup = null;
		}
	}
	
	[Table(Name="dbo.tblAssetGroupClass")]
	public partial class AssetGroupClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AssetGroupID;
		
		private string _AssetClassID;
		
		private EntitySet<ModelBreakdown> _ModelBreakdowns;
		
		private EntityRef<AssetClass> _AssetClass;
		
		private EntityRef<AssetGroup> _AssetGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetGroupIDChanging(string value);
    partial void OnAssetGroupIDChanged();
    partial void OnAssetClassIDChanging(string value);
    partial void OnAssetClassIDChanged();
    #endregion
		
		public AssetGroupClass()
		{
			this._ModelBreakdowns = new EntitySet<ModelBreakdown>(new Action<ModelBreakdown>(this.attach_ModelBreakdowns), new Action<ModelBreakdown>(this.detach_ModelBreakdowns));
			this._AssetClass = default(EntityRef<AssetClass>);
			this._AssetGroup = default(EntityRef<AssetGroup>);
			OnCreated();
		}
		
		[Column(Storage="_AssetGroupID", DbType="NChar(4) NOT NULL", CanBeNull=false)]
		public string AssetGroupID
		{
			get
			{
				return this._AssetGroupID;
			}
			set
			{
				if ((this._AssetGroupID != value))
				{
					if (this._AssetGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetGroupIDChanging(value);
					this.SendPropertyChanging();
					this._AssetGroupID = value;
					this.SendPropertyChanged("AssetGroupID");
					this.OnAssetGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetClassID", DbType="NChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AssetClassID
		{
			get
			{
				return this._AssetClassID;
			}
			set
			{
				if ((this._AssetClassID != value))
				{
					if (this._AssetClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetClassIDChanging(value);
					this.SendPropertyChanging();
					this._AssetClassID = value;
					this.SendPropertyChanged("AssetClassID");
					this.OnAssetClassIDChanged();
				}
			}
		}
		
		[Association(Name="AssetGroupClass_ModelBreakdown", Storage="_ModelBreakdowns", ThisKey="AssetClassID", OtherKey="AssetClassID")]
		public EntitySet<ModelBreakdown> ModelBreakdowns
		{
			get
			{
				return this._ModelBreakdowns;
			}
			set
			{
				this._ModelBreakdowns.Assign(value);
			}
		}
		
		[Association(Name="AssetClass_AssetGroupClass", Storage="_AssetClass", ThisKey="AssetClassID", OtherKey="ID", IsForeignKey=true)]
		public AssetClass AssetClass
		{
			get
			{
				return this._AssetClass.Entity;
			}
			set
			{
				AssetClass previousValue = this._AssetClass.Entity;
				if (((previousValue != value) 
							|| (this._AssetClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetClass.Entity = null;
						previousValue.AssetGroupClass = null;
					}
					this._AssetClass.Entity = value;
					if ((value != null))
					{
						value.AssetGroupClass = this;
						this._AssetClassID = value.ID;
					}
					else
					{
						this._AssetClassID = default(string);
					}
					this.SendPropertyChanged("AssetClass");
				}
			}
		}
		
		[Association(Name="AssetGroup_AssetGroupClass", Storage="_AssetGroup", ThisKey="AssetGroupID", OtherKey="ID", IsForeignKey=true)]
		public AssetGroup AssetGroup
		{
			get
			{
				return this._AssetGroup.Entity;
			}
			set
			{
				AssetGroup previousValue = this._AssetGroup.Entity;
				if (((previousValue != value) 
							|| (this._AssetGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetGroup.Entity = null;
						previousValue.AssetGroupClasses.Remove(this);
					}
					this._AssetGroup.Entity = value;
					if ((value != null))
					{
						value.AssetGroupClasses.Add(this);
						this._AssetGroupID = value.ID;
					}
					else
					{
						this._AssetGroupID = default(string);
					}
					this.SendPropertyChanged("AssetGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModelBreakdowns(ModelBreakdown entity)
		{
			this.SendPropertyChanging();
			entity.AssetGroupClass = this;
		}
		
		private void detach_ModelBreakdowns(ModelBreakdown entity)
		{
			this.SendPropertyChanging();
			entity.AssetGroupClass = null;
		}
	}
	
	[Table(Name="dbo.tblClientAsset")]
	public partial class ClientAsset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _ClientGUID;
		
		private string _AssetName;
		
		private decimal _Amount;
		
		private decimal _CASH;
		
		private decimal _COMM;
		
		private decimal _COPR;
		
		private decimal _GLEQ;
		
		private decimal _HEDG;
		
		private decimal _LOSH;
		
		private decimal _PREQ;
		
		private decimal _UKCB;
		
		private decimal _UKEQ;
		
		private decimal _UKGB;
		
		private decimal _UKHY;
		
		private decimal _WOBO;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnClientGUIDChanging(System.Guid value);
    partial void OnClientGUIDChanged();
    partial void OnAssetNameChanging(string value);
    partial void OnAssetNameChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCASHChanging(decimal value);
    partial void OnCASHChanged();
    partial void OnCOMMChanging(decimal value);
    partial void OnCOMMChanged();
    partial void OnCOPRChanging(decimal value);
    partial void OnCOPRChanged();
    partial void OnGLEQChanging(decimal value);
    partial void OnGLEQChanged();
    partial void OnHEDGChanging(decimal value);
    partial void OnHEDGChanged();
    partial void OnLOSHChanging(decimal value);
    partial void OnLOSHChanged();
    partial void OnPREQChanging(decimal value);
    partial void OnPREQChanged();
    partial void OnUKCBChanging(decimal value);
    partial void OnUKCBChanged();
    partial void OnUKEQChanging(decimal value);
    partial void OnUKEQChanged();
    partial void OnUKGBChanging(decimal value);
    partial void OnUKGBChanged();
    partial void OnUKHYChanging(decimal value);
    partial void OnUKHYChanged();
    partial void OnWOBOChanging(decimal value);
    partial void OnWOBOChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public ClientAsset()
		{
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClientGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ClientGUID
		{
			get
			{
				return this._ClientGUID;
			}
			set
			{
				if ((this._ClientGUID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientGUIDChanging(value);
					this.SendPropertyChanging();
					this._ClientGUID = value;
					this.SendPropertyChanged("ClientGUID");
					this.OnClientGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AssetName
		{
			get
			{
				return this._AssetName;
			}
			set
			{
				if ((this._AssetName != value))
				{
					this.OnAssetNameChanging(value);
					this.SendPropertyChanging();
					this._AssetName = value;
					this.SendPropertyChanged("AssetName");
					this.OnAssetNameChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CASH", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal CASH
		{
			get
			{
				return this._CASH;
			}
			set
			{
				if ((this._CASH != value))
				{
					this.OnCASHChanging(value);
					this.SendPropertyChanging();
					this._CASH = value;
					this.SendPropertyChanged("CASH");
					this.OnCASHChanged();
				}
			}
		}
		
		[Column(Storage="_COMM", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal COMM
		{
			get
			{
				return this._COMM;
			}
			set
			{
				if ((this._COMM != value))
				{
					this.OnCOMMChanging(value);
					this.SendPropertyChanging();
					this._COMM = value;
					this.SendPropertyChanged("COMM");
					this.OnCOMMChanged();
				}
			}
		}
		
		[Column(Storage="_COPR", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal COPR
		{
			get
			{
				return this._COPR;
			}
			set
			{
				if ((this._COPR != value))
				{
					this.OnCOPRChanging(value);
					this.SendPropertyChanging();
					this._COPR = value;
					this.SendPropertyChanged("COPR");
					this.OnCOPRChanged();
				}
			}
		}
		
		[Column(Storage="_GLEQ", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal GLEQ
		{
			get
			{
				return this._GLEQ;
			}
			set
			{
				if ((this._GLEQ != value))
				{
					this.OnGLEQChanging(value);
					this.SendPropertyChanging();
					this._GLEQ = value;
					this.SendPropertyChanged("GLEQ");
					this.OnGLEQChanged();
				}
			}
		}
		
		[Column(Storage="_HEDG", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal HEDG
		{
			get
			{
				return this._HEDG;
			}
			set
			{
				if ((this._HEDG != value))
				{
					this.OnHEDGChanging(value);
					this.SendPropertyChanging();
					this._HEDG = value;
					this.SendPropertyChanged("HEDG");
					this.OnHEDGChanged();
				}
			}
		}
		
		[Column(Storage="_LOSH", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LOSH
		{
			get
			{
				return this._LOSH;
			}
			set
			{
				if ((this._LOSH != value))
				{
					this.OnLOSHChanging(value);
					this.SendPropertyChanging();
					this._LOSH = value;
					this.SendPropertyChanged("LOSH");
					this.OnLOSHChanged();
				}
			}
		}
		
		[Column(Storage="_PREQ", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal PREQ
		{
			get
			{
				return this._PREQ;
			}
			set
			{
				if ((this._PREQ != value))
				{
					this.OnPREQChanging(value);
					this.SendPropertyChanging();
					this._PREQ = value;
					this.SendPropertyChanged("PREQ");
					this.OnPREQChanged();
				}
			}
		}
		
		[Column(Storage="_UKCB", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKCB
		{
			get
			{
				return this._UKCB;
			}
			set
			{
				if ((this._UKCB != value))
				{
					this.OnUKCBChanging(value);
					this.SendPropertyChanging();
					this._UKCB = value;
					this.SendPropertyChanged("UKCB");
					this.OnUKCBChanged();
				}
			}
		}
		
		[Column(Storage="_UKEQ", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKEQ
		{
			get
			{
				return this._UKEQ;
			}
			set
			{
				if ((this._UKEQ != value))
				{
					this.OnUKEQChanging(value);
					this.SendPropertyChanging();
					this._UKEQ = value;
					this.SendPropertyChanged("UKEQ");
					this.OnUKEQChanged();
				}
			}
		}
		
		[Column(Storage="_UKGB", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKGB
		{
			get
			{
				return this._UKGB;
			}
			set
			{
				if ((this._UKGB != value))
				{
					this.OnUKGBChanging(value);
					this.SendPropertyChanging();
					this._UKGB = value;
					this.SendPropertyChanged("UKGB");
					this.OnUKGBChanged();
				}
			}
		}
		
		[Column(Storage="_UKHY", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKHY
		{
			get
			{
				return this._UKHY;
			}
			set
			{
				if ((this._UKHY != value))
				{
					this.OnUKHYChanging(value);
					this.SendPropertyChanging();
					this._UKHY = value;
					this.SendPropertyChanged("UKHY");
					this.OnUKHYChanged();
				}
			}
		}
		
		[Column(Storage="_WOBO", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal WOBO
		{
			get
			{
				return this._WOBO;
			}
			set
			{
				if ((this._WOBO != value))
				{
					this.OnWOBOChanging(value);
					this.SendPropertyChanging();
					this._WOBO = value;
					this.SendPropertyChanged("WOBO");
					this.OnWOBOChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		[Association(Name="Client_ClientAsset", Storage="_Client", ThisKey="ClientGUID", OtherKey="GUID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientAssets.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientAssets.Add(this);
						this._ClientGUID = value.GUID;
					}
					else
					{
						this._ClientGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblClientAssetClass")]
	public partial class ClientAssetClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ClientGUID;
		
		private decimal _CASH;
		
		private decimal _COMM;
		
		private decimal _COPR;
		
		private decimal _GLEQ;
		
		private decimal _HEDG;
		
		private decimal _LOSH;
		
		private decimal _PREQ;
		
		private decimal _UKCB;
		
		private decimal _UKEQ;
		
		private decimal _UKGB;
		
		private decimal _UKHY;
		
		private decimal _WOBO;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientGUIDChanging(System.Guid value);
    partial void OnClientGUIDChanged();
    partial void OnCASHChanging(decimal value);
    partial void OnCASHChanged();
    partial void OnCOMMChanging(decimal value);
    partial void OnCOMMChanged();
    partial void OnCOPRChanging(decimal value);
    partial void OnCOPRChanged();
    partial void OnGLEQChanging(decimal value);
    partial void OnGLEQChanged();
    partial void OnHEDGChanging(decimal value);
    partial void OnHEDGChanged();
    partial void OnLOSHChanging(decimal value);
    partial void OnLOSHChanged();
    partial void OnPREQChanging(decimal value);
    partial void OnPREQChanged();
    partial void OnUKCBChanging(decimal value);
    partial void OnUKCBChanged();
    partial void OnUKEQChanging(decimal value);
    partial void OnUKEQChanged();
    partial void OnUKGBChanging(decimal value);
    partial void OnUKGBChanged();
    partial void OnUKHYChanging(decimal value);
    partial void OnUKHYChanged();
    partial void OnWOBOChanging(decimal value);
    partial void OnWOBOChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public ClientAssetClass()
		{
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[Column(Storage="_ClientGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ClientGUID
		{
			get
			{
				return this._ClientGUID;
			}
			set
			{
				if ((this._ClientGUID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientGUIDChanging(value);
					this.SendPropertyChanging();
					this._ClientGUID = value;
					this.SendPropertyChanged("ClientGUID");
					this.OnClientGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CASH", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal CASH
		{
			get
			{
				return this._CASH;
			}
			set
			{
				if ((this._CASH != value))
				{
					this.OnCASHChanging(value);
					this.SendPropertyChanging();
					this._CASH = value;
					this.SendPropertyChanged("CASH");
					this.OnCASHChanged();
				}
			}
		}
		
		[Column(Storage="_COMM", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal COMM
		{
			get
			{
				return this._COMM;
			}
			set
			{
				if ((this._COMM != value))
				{
					this.OnCOMMChanging(value);
					this.SendPropertyChanging();
					this._COMM = value;
					this.SendPropertyChanged("COMM");
					this.OnCOMMChanged();
				}
			}
		}
		
		[Column(Storage="_COPR", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal COPR
		{
			get
			{
				return this._COPR;
			}
			set
			{
				if ((this._COPR != value))
				{
					this.OnCOPRChanging(value);
					this.SendPropertyChanging();
					this._COPR = value;
					this.SendPropertyChanged("COPR");
					this.OnCOPRChanged();
				}
			}
		}
		
		[Column(Storage="_GLEQ", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal GLEQ
		{
			get
			{
				return this._GLEQ;
			}
			set
			{
				if ((this._GLEQ != value))
				{
					this.OnGLEQChanging(value);
					this.SendPropertyChanging();
					this._GLEQ = value;
					this.SendPropertyChanged("GLEQ");
					this.OnGLEQChanged();
				}
			}
		}
		
		[Column(Storage="_HEDG", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal HEDG
		{
			get
			{
				return this._HEDG;
			}
			set
			{
				if ((this._HEDG != value))
				{
					this.OnHEDGChanging(value);
					this.SendPropertyChanging();
					this._HEDG = value;
					this.SendPropertyChanged("HEDG");
					this.OnHEDGChanged();
				}
			}
		}
		
		[Column(Storage="_LOSH", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LOSH
		{
			get
			{
				return this._LOSH;
			}
			set
			{
				if ((this._LOSH != value))
				{
					this.OnLOSHChanging(value);
					this.SendPropertyChanging();
					this._LOSH = value;
					this.SendPropertyChanged("LOSH");
					this.OnLOSHChanged();
				}
			}
		}
		
		[Column(Storage="_PREQ", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal PREQ
		{
			get
			{
				return this._PREQ;
			}
			set
			{
				if ((this._PREQ != value))
				{
					this.OnPREQChanging(value);
					this.SendPropertyChanging();
					this._PREQ = value;
					this.SendPropertyChanged("PREQ");
					this.OnPREQChanged();
				}
			}
		}
		
		[Column(Storage="_UKCB", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKCB
		{
			get
			{
				return this._UKCB;
			}
			set
			{
				if ((this._UKCB != value))
				{
					this.OnUKCBChanging(value);
					this.SendPropertyChanging();
					this._UKCB = value;
					this.SendPropertyChanged("UKCB");
					this.OnUKCBChanged();
				}
			}
		}
		
		[Column(Storage="_UKEQ", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKEQ
		{
			get
			{
				return this._UKEQ;
			}
			set
			{
				if ((this._UKEQ != value))
				{
					this.OnUKEQChanging(value);
					this.SendPropertyChanging();
					this._UKEQ = value;
					this.SendPropertyChanged("UKEQ");
					this.OnUKEQChanged();
				}
			}
		}
		
		[Column(Storage="_UKGB", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKGB
		{
			get
			{
				return this._UKGB;
			}
			set
			{
				if ((this._UKGB != value))
				{
					this.OnUKGBChanging(value);
					this.SendPropertyChanging();
					this._UKGB = value;
					this.SendPropertyChanged("UKGB");
					this.OnUKGBChanged();
				}
			}
		}
		
		[Column(Storage="_UKHY", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UKHY
		{
			get
			{
				return this._UKHY;
			}
			set
			{
				if ((this._UKHY != value))
				{
					this.OnUKHYChanging(value);
					this.SendPropertyChanging();
					this._UKHY = value;
					this.SendPropertyChanged("UKHY");
					this.OnUKHYChanged();
				}
			}
		}
		
		[Column(Storage="_WOBO", DbType="Decimal(4,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal WOBO
		{
			get
			{
				return this._WOBO;
			}
			set
			{
				if ((this._WOBO != value))
				{
					this.OnWOBOChanging(value);
					this.SendPropertyChanging();
					this._WOBO = value;
					this.SendPropertyChanged("WOBO");
					this.OnWOBOChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		[Association(Name="Client_ClientAssetClass", Storage="_Client", ThisKey="ClientGUID", OtherKey="GUID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientAssetClass = null;
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientAssetClass = this;
						this._ClientGUID = value.GUID;
					}
					else
					{
						this._ClientGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class AssetWeighting
	{
		
		private string _AssetClass;
		
		private System.Nullable<double> _Weighting;
		
		public AssetWeighting()
		{
		}
		
		[Column(Storage="_AssetClass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetClass
		{
			get
			{
				return this._AssetClass;
			}
			set
			{
				if ((this._AssetClass != value))
				{
					this._AssetClass = value;
				}
			}
		}
		
		[Column(Storage="_Weighting", DbType="Float")]
		public System.Nullable<double> Weighting
		{
			get
			{
				return this._Weighting;
			}
			set
			{
				if ((this._Weighting != value))
				{
					this._Weighting = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
