#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSMTenon.ReportGenerator.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RepGen")]
	public partial class RepGenDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStrategy(Strategy instance);
    partial void UpdateStrategy(Strategy instance);
    partial void DeleteStrategy(Strategy instance);
    #endregion
		
		public RepGenDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RepGenConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RepGenDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Strategy> Strategies
		{
			get
			{
				return this.GetTable<Strategy>();
			}
		}
	}
	
	[Table(Name="dbo.tblStrategy")]
	public partial class Strategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private decimal _Cost;
		
		private System.Nullable<double> _ReturnIncome;
		
		private double _ReturnGrowth;
		
		private string _GraphText;
		
		private string _InvestorFocus;
		
		private string _Aim;
		
		private string _TimeHorizonText;
		
		private string _AssetClasses;
		
		private string _RollingReturnText;
		
		private short _TimeHorizon;
		
		private System.Data.Linq.Binary _SSMA_TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnReturnIncomeChanging(System.Nullable<double> value);
    partial void OnReturnIncomeChanged();
    partial void OnReturnGrowthChanging(double value);
    partial void OnReturnGrowthChanged();
    partial void OnGraphTextChanging(string value);
    partial void OnGraphTextChanged();
    partial void OnInvestorFocusChanging(string value);
    partial void OnInvestorFocusChanged();
    partial void OnAimChanging(string value);
    partial void OnAimChanged();
    partial void OnTimeHorizonTextChanging(string value);
    partial void OnTimeHorizonTextChanged();
    partial void OnAssetClassesChanging(string value);
    partial void OnAssetClassesChanged();
    partial void OnRollingReturnTextChanging(string value);
    partial void OnRollingReturnTextChanged();
    partial void OnTimeHorizonChanging(short value);
    partial void OnTimeHorizonChanged();
    partial void OnSSMA_TimeStampChanging(System.Data.Linq.Binary value);
    partial void OnSSMA_TimeStampChanged();
    #endregion
		
		public Strategy()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NVarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Cost", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnIncome", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReturnIncome
		{
			get
			{
				return this._ReturnIncome;
			}
			set
			{
				if ((this._ReturnIncome != value))
				{
					this.OnReturnIncomeChanging(value);
					this.SendPropertyChanging();
					this._ReturnIncome = value;
					this.SendPropertyChanged("ReturnIncome");
					this.OnReturnIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnGrowth", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double ReturnGrowth
		{
			get
			{
				return this._ReturnGrowth;
			}
			set
			{
				if ((this._ReturnGrowth != value))
				{
					this.OnReturnGrowthChanging(value);
					this.SendPropertyChanging();
					this._ReturnGrowth = value;
					this.SendPropertyChanged("ReturnGrowth");
					this.OnReturnGrowthChanged();
				}
			}
		}
		
		[Column(Storage="_GraphText", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string GraphText
		{
			get
			{
				return this._GraphText;
			}
			set
			{
				if ((this._GraphText != value))
				{
					this.OnGraphTextChanging(value);
					this.SendPropertyChanging();
					this._GraphText = value;
					this.SendPropertyChanged("GraphText");
					this.OnGraphTextChanged();
				}
			}
		}
		
		[Column(Storage="_InvestorFocus", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string InvestorFocus
		{
			get
			{
				return this._InvestorFocus;
			}
			set
			{
				if ((this._InvestorFocus != value))
				{
					this.OnInvestorFocusChanging(value);
					this.SendPropertyChanging();
					this._InvestorFocus = value;
					this.SendPropertyChanged("InvestorFocus");
					this.OnInvestorFocusChanged();
				}
			}
		}
		
		[Column(Storage="_Aim", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Aim
		{
			get
			{
				return this._Aim;
			}
			set
			{
				if ((this._Aim != value))
				{
					this.OnAimChanging(value);
					this.SendPropertyChanging();
					this._Aim = value;
					this.SendPropertyChanged("Aim");
					this.OnAimChanged();
				}
			}
		}
		
		[Column(Storage="_TimeHorizonText", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TimeHorizonText
		{
			get
			{
				return this._TimeHorizonText;
			}
			set
			{
				if ((this._TimeHorizonText != value))
				{
					this.OnTimeHorizonTextChanging(value);
					this.SendPropertyChanging();
					this._TimeHorizonText = value;
					this.SendPropertyChanged("TimeHorizonText");
					this.OnTimeHorizonTextChanged();
				}
			}
		}
		
		[Column(Storage="_AssetClasses", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AssetClasses
		{
			get
			{
				return this._AssetClasses;
			}
			set
			{
				if ((this._AssetClasses != value))
				{
					this.OnAssetClassesChanging(value);
					this.SendPropertyChanging();
					this._AssetClasses = value;
					this.SendPropertyChanged("AssetClasses");
					this.OnAssetClassesChanged();
				}
			}
		}
		
		[Column(Storage="_RollingReturnText", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RollingReturnText
		{
			get
			{
				return this._RollingReturnText;
			}
			set
			{
				if ((this._RollingReturnText != value))
				{
					this.OnRollingReturnTextChanging(value);
					this.SendPropertyChanging();
					this._RollingReturnText = value;
					this.SendPropertyChanged("RollingReturnText");
					this.OnRollingReturnTextChanged();
				}
			}
		}
		
		[Column(Storage="_TimeHorizon", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short TimeHorizon
		{
			get
			{
				return this._TimeHorizon;
			}
			set
			{
				if ((this._TimeHorizon != value))
				{
					this.OnTimeHorizonChanging(value);
					this.SendPropertyChanging();
					this._TimeHorizon = value;
					this.SendPropertyChanged("TimeHorizon");
					this.OnTimeHorizonChanged();
				}
			}
		}
		
		[Column(Storage="_SSMA_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SSMA_TimeStamp
		{
			get
			{
				return this._SSMA_TimeStamp;
			}
			set
			{
				if ((this._SSMA_TimeStamp != value))
				{
					this.OnSSMA_TimeStampChanging(value);
					this.SendPropertyChanging();
					this._SSMA_TimeStamp = value;
					this.SendPropertyChanged("SSMA_TimeStamp");
					this.OnSSMA_TimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
